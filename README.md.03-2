#devops-netology
03-sysadmin-02-terminal

1. Какого типа команда cd? Попробуйте объяснить, почему она именно такого 
типа; опишите ход своих мыслей, если считаете что она могла бы быть другого 
типа.

Ответ: SHELL-BUILTINS

2. Какая альтернатива без pipe команде grep <some_string> <some_file> | wc -l?
 man grep поможет в ответе на этот вопрос. Ознакомьтесь с документом о других
 подобных некорректных вариантах использования pipe.

Ответ: grep <some_string> <some_file> -c

3. Какой процесс с PID 1 является родителем для всех процессов в вашей 
виртуальной машине Ubuntu 20.04?

Ответ: systemd (ps -ejH)

4. Как будет выглядеть команда, которая перенаправит вывод stderr ls
 на другую сессию терминала?

Ответ: ls 2>/dev/pts/1, где 1 - номер другой сессии.

5. Получится ли одновременно передать команде файл на stdin и вывести ее
 stdout в другой файл? Приведите работающий пример.

Ответ: cat < test01 > test02 

6. Получится ли вывести находясь в графическом режиме данные из PTY в 
какой-либо из эмуляторов TTY? Сможете ли вы наблюдать выводимые данные?

Ответ: cat /dev/tty > /dev/pts/0

7. Выполните команду bash 5>&1. К чему она приведет? Что будет, если вы 
выполните echo netology > /proc/$$/fd/5? Почему так происходит?

Ответ: bash 5>&1 создаст вывод с именем 5 и перенаправит его в stdout, вторая
 же команда гласит: послать netology в вывод 5, ну текст и появится в stdout.

8. Получится ли в качестве входного потока для pipe использовать только stderr
 команды, не потеряв при этом отображение stdout на pty? Напоминаем: по 
умолчанию через pipe передается только stdout команды слева от | на stdin 
команды справа. Это можно сделать, поменяв стандартные потоки местами через 
промежуточный новый дескриптор, который вы научились создавать в предыдущем 
вопросе.

Ответ: err_command 3>&2 2>&1 1>&3 | cat file311

9. Что выведет команда cat /proc/$$/environ? Как еще можно получить 
аналогичный по содержанию вывод?

Ответ: выведет переменные окружения для текущего процесса (bash), также можно 
получить аналогичный вывод, поставив вместо $$ PID процесса bash.

10. Используя man, опишите что доступно по адресам /proc/<PID>/cmdline,
 /proc/<PID>/exe.

Ответ: /proc/<PID>/cmdline - файл, содержащий полную строку команды,
запустившей процесс с соотв. PID. /proc/<PID>/exe - символическая ссылка
 на путь, по которому запущена процесс.

11. Узнайте, какую наиболее старшую версию набора инструкций SSE поддерживает
 ваш процессор с помощью /proc/cpuinfo.

Ответ: sse4_2 (cat /proc/cpuinfo | grep sse)

12. При открытии нового окна терминала и vagrant ssh создается новая сессия 
и выделяется pty. Это можно подтвердить командой tty, которая упоминалась 
в лекции 3.2. Однако:
vagrant@netology1:~$ ssh localhost 'tty'
not a tty
Почитайте, почему так происходит, и как изменить поведение.

Ответ: по умолчанию для ssh нет доступного терминала, можно обойти опцией -t.

13. Бывает, что есть необходимость переместить запущенный процесс из одной 
сессии в другую. Попробуйте сделать это, воспользовавшись reptyr. Например, 
так можно перенести в screen процесс, который вы запустили по ошибке в обычной 
SSH-сессии.

Ответ: Устанавливаем sudo apt-get install reptyr на терминале, куда будем
перетаскивать процесс. Запускаем на другом терминале процесс например, nano.
На первом терминале создаем screen -S Disp и в нем  ищем PID процесса nano
с помощью ps -ef. перетаскиваем при помощи reptyr PID.


14. sudo echo string > /root/new_file не даст выполнить перенаправление под 
обычным пользователем, так как перенаправлением занимается процесс shell'а, 
который запущен без sudo под вашим пользователем. Для решения данной проблемы 
можно использовать конструкцию echo string | sudo tee /root/new_file. 
Узнайте что делает команда tee и почему в отличие от sudo echo команда с sudo
 tee будет работать.

Ответ: tee записывает данные в файл и выводит копию в STDOUT, а также позволяет
записывать в защищенный файл.

